INFINI = 1000 * 1000 * 1000

L, C, P = 4, 7, 10
example = [
    [-50, 21, -1, -83, 27, 3, 4],
    [2, -10, 60, 6, 11, -20, -27],
    [-12, 100, -2, 2, 9, -12, 80],
    [9, -21, -99, 1, 10, 7, -8],
]

resultat_attendu = [
    [0, 0, 81, 140, 140, 158, 161],
    [-60, 11, 80, 57, 157, 161, 165],
    [-68, -9, 140, 63, 158, 141, 128],
    [-90, 81, 138, 63, 157, 128, 198],
    [-91, 50, 29, 54, 157, 135, 184],
]

tab = [[-INFINI for _ in range(C + 1)] for _ in range(L + 1)]

# pour une case
# somme_au_dessus = example[0][3] + example[1][3]
# # valeur_case = example[2][3]
# tab[3][4] = max(
#     tab[2][4] - P + valeur_case,
#     tab[3][3] + somme_au_dessus + valeur_case
# )

max_colonne_precedente = 0
max_colonne_actuelle = 0

for c in range(1, C + 1):
    max_colonne_precedente = max_colonne_actuelle
    tab[0][c] = max_colonne_precedente

    for l in range(1, L + 1):
        somme_au_dessus = 0
        valeur_case = example[l - 1][c - 1]

        tab[l][c] = max(
            tab[l - 1][c] - P + valeur_case,
            tab[l][c - 1] + somme_au_dessus + valeur_case,
        )

        somme_au_dessus += valeur_case
        max_colonne_actuelle = max(max_colonne_actuelle, tab[l][c])

tab

tab = [[-INFINI for _ in range(C)] for _ in range(L + 1)]


def somme_case(prof_creusee_colonne_precedente, i, j):
    somme = 0

    for b in range(1, i):
        somme += example[b - 1][j]
        if b > prof_creusee_colonne_precedente:
            somme -= P

    return somme


def fonc(i, j):
    if i < 0:
        return 0
    if tab[i][j] == -INFINI:
        profit_max = -INFINI
        valeur_case = 0

        if i > 0:
            valeur_case = example[i - 1][j]

        if j == 0:
            if i == 0:
                profit_max = 0
            else:
                profit_max = fonc(i - 1, 0) + valeur_case - P
        else:
            for a in range(L + 1):
                malus = 0
                if a < i:
                    malus = P

                profit_max = max(
                    profit_max,
                    fonc(a, j - 1) - malus + valeur_case + somme_case(a, i, j),
                )

        tab[i][j] = profit_max

    return tab[i][j]


for i in range(L + 1):
    fonc(i, C - 1)

tab
