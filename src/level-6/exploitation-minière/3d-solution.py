import sys

# ---------- Constantes ----------
L = 50
C = 50
INCONNU = 500 * 500 * 100 + 1

# ---------- Variables ----------
# profit_dyn[debut][fin][hauteur] désigne le profit maximum
# entre debut et fin (inclus), en partant de la ligne hauteur.
# exemple : profit_dyn[1][3][5] désigne le profit maximum
# entre les colonnes 1 à 3 (incluses), en partant de la 5ème ligne.
profit_dyn = [[[INCONNU for _ in range(L)] for _ in range(C)] for _ in range(C)]

minerai = [[0 for _ in range(C)] for _ in range(L)]

# Nombre de lignes, de colonnes et pallier
nb_lignes = 0
nb_colonnes = 0
pallier = 0


# ---------- Fonctions ----------
def meilleur_profit(debut, fin, ligne):
    """
    Renvoie le meilleur profit entre la colonne 'debut' et 'fin' (inclus),
    à la ligne 'ligne'.

    Deux options :
    1) Découper le sous-problème en sous-parties.
    2) Prendre la somme de tous les minerais entre [debut; fin] moins le pallier.
    """
    global profit_dyn

    if profit_dyn[debut][fin][ligne] == INCONNU:  # Diviser pour régner
        profit_max = 0

        # ----- 1) Découpage -----
        for i in range(debut, fin):
            profit = meilleur_profit(debut, i, ligne) + meilleur_profit(i + 1, fin,
                                                                        ligne)
            profit_max = max(profit_max, profit)

        # ----- 2) On prend tout -----
        profit = 0
        for i in range(debut, fin + 1):
            profit += minerai[ligne][i]

        profit -= pallier  # On enlève le prix du pallier

        if ligne < nb_lignes - 1:  # On recommence pour la ligne suivante
            profit += meilleur_profit(debut, fin, ligne + 1)

        profit_max = max(profit_max, profit)

        # Mise à jour du tableau dynamique
        profit_dyn[debut][fin][ligne] = profit_max

    return profit_dyn[debut][fin][ligne]


# ---------- Main ----------
if __name__ == "__main__":
    # -------- Lecture des entrées --------
    nb_lignes, nb_colonnes, pallier = map(int, input().split())

    for i in range(nb_lignes):
        minerai[i] = list(map(int, input().split()))

    # -------- Initialisation --------
    for i in range(C):
        for j in range(i, C):
            for k in range(L):
                profit_dyn[i][j][k] = INCONNU

    for i in range(nb_colonnes):
        # Cas d'arrêt : profit_dyn[i][i][nb_lignes-1] = minerai[nb_lignes-1][i] - pallier
        profit_dyn[i][i][nb_lignes - 1] = max(0, minerai[nb_lignes - 1][i] - pallier)

    # -------- Calcul du résultat --------
    resultat = meilleur_profit(0, nb_colonnes - 1, 0)

    # -------- Affichage du résultat --------
    print(resultat)
